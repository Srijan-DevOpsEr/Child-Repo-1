name: Azure Networking PR Creation & Trigger Pipeline

permissions:
  contents: write
  id-token: write  # only if you're using OIDC
  pull-requests: read  # only if needed for PR jobs

on:
  pull_request:
    types:
      - opened        # Triggered when a PR is created (opened)
      - synchronize   # Triggered when a PR is updated (new commits)
    branches: [main]  # Adjust the branch as needed
  workflow_dispatch:

jobs:
  # Step 1: Trigger Central Pipeline on PR Creation or Update
  trigger_central_pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Central Pipeline on PR Creation or Update
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.CENTRAL_BUILD_PIPELINE_PAT }}  # Personal Access Token for authentication
          repository: chain-builds/central-repo  # The central repository where the orchestration pipeline lives
          event-type: pr_event  # Custom event type to trigger the central pipeline
          client-payload: |
            {
              "triggered_by": "${{ github.repository }}",
              "pr_event": "${{ github.event.action }}",  # This can be 'opened' or 'synchronize'
              "pr_number": "${{ github.event.pull_request.number }}",
              "commit_sha": "${{ github.sha }}",
              "branch": "${{ github.head_ref }}"
            }
            
  terraform-format:
    name: Terraform Format
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Terraform Format
        run: terraform fmt -check -recursive

  # Step 3: Terraform Validate (Runs after format)
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Terraform Validate
        run: terraform validate

  # Step 4: Terraform Docs Generation (Optional)
  terraform-docs:
    name: Terraform Documentation Generation
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - uses: actions/checkout@v3.6.0
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs inside the README.md and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          find-dir: .
          output-file: README.md
          output-method: inject
          git-push: 'true'
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # Step 5: Terraform Plan (Runs after validation and docs generation)
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}
    needs: [
      terraform-format,
      terraform-validate,
      terraform-docs
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init      

      - name: Terraform Plan                
        run: terraform plan -out=pr-plan.out -var "cfg_aad_client_secret=${{ secrets.AAD_CLIENT_SECRET }}"

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: pr-plan.out

  # Step 6: Checkov (Optional security scanning)
  checkov:
    name: Checkov Plan
    runs-on: ubuntu-latest
    needs: terraform-plan
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Convert to JSON
        run: terraform show -json pr-plan.out > tfplan.json

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          file: tfplan.json
          skip_check: CKV_AZURE_178,CKV_AZURE_216,CKV_AZURE_220

  compliance:
    name: Terraform Compliance
    runs-on: ubuntu-latest
    needs: terraform-plan
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps: 
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Convert to JSON
        run: terraform show -json pr-plan.out > tfplan.json

      - name: Install terraform-compliance
        run: |
          pip install terraform-compliance

      # - name: Run terraform-compliance
      #   run: terraform-compliance -p tfplan.json -f features/

  terratest:
    name: Terratest
    runs-on: ubuntu-latest
    needs: terraform-plan
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
      
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # - name: Run Terratest
      #   run: |
      #     cd terratest
      #     go mod tidy
      #     go test -v -tags="azure azureslim network" -timeout 30m
      #   env:
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  # compliance:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get install jq curl

  #     - name: Fetch plan JSON from TFC
  #       env:
  #         TFC_TOKEN: ${{ secrets.TF_API_TOKEN }}
  #         TFC_ORG: SivajiRaavi
  #         TFC_WORKSPACE: azure-recovery-services-vault-dev
  #       run: |
  #         # Get workspace ID
  #         WORKSPACE_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/organizations/$TFC_ORG/workspaces/$TFC_WORKSPACE \
  #           | jq -r '.data.id')

  #         # Get latest run ID
  #         RUN_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/runs \
  #           | jq -r '.data[0].id')

  #         # Get plan ID
  #         PLAN_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/runs/$RUN_ID \
  #           | jq -r '.data.relationships.plan.data.id')

  #         # Get the JSON plan download URL
  #         PLAN_JSON_URL=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/plans/$PLAN_ID/json-output \
  #           | jq -r '.data.attributes."hosted-json-url"')

  #         # Download JSON plan
  #         curl -s -H "Authorization: Bearer $TFC_TOKEN" "$PLAN_JSON_URL" -o tfplan.json

  #     - name: Run terraform-compliance
  #       run: |
  #         docker run --rm \
  #           -v ${{ github.workspace }}:/target \
  #           eerkunt/terraform-compliance \
  #           -p /target/tfplan.json \
  #           -f /target/features